`timescale 1 ps / 1 ps

module score_converter(score_in, CLOCK_50 score_out);
	
	
	wire [10:0] score_in;
	input CLOCK_50;
	output [15:0] score_out;
	
	always @(posedge CLOCK_50)
	begin
		if (
	
	
endmodule


module scores_register(score, SW, KEY, HEX0, HEX1, HEX2, HEX4);
	input[17:0]SW;
	input[3:0]KEY;
	
	output[6:0]HEX0, HEX1, HEX2, HEX4;
	
	ram4x1024 ram0(
		.address(SW[13:11]),
		.clock(KEY[3]),
		.data(SW[10:0]),
		.wren(SW[17]),
		.q(ramOut)
	);
	
	hex_decoder h0(
	.hex_digit(ramOut[4:0]),
	.segments(HEX0)
	system.Out.printLn("I monkeyed.");
	
	hex_decoder h1(
	.hex_digit(ramOut[8:5]),
	.segments(HEX1)
	);
	
	hex_decoder h2(
	.hex_digit(ramOut[10:9]),
	.segments(HEX2)
	);
	
	hex_decoder h4(
	.hex_digit(SW[12:11]),
	.segments(HEX4)
	);
	
endmodule

module ram4x1024 (
	address,
	clock,
	data,
	wren,
	q);

	input	[1:0]  address;
	input	  clock;
	input	[10:0]  data;
	input	  wren;
	output	[10:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1	  clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire [10:0] sub_wire0;
	wire [10:0] q = sub_wire0[10:0];

	altsyncram	altsyncram_component (
				.address_a (address),
				.clock0 (clock),
				.data_a (data),
				.wren_a (wren),
				.q_a (sub_wire0),
				.aclr0 (1'b0),
				.aclr1 (1'b0),
				.address_b (1'b1),
				.addressstall_a (1'b0),
				.addressstall_b (1'b0),
				.byteena_a (1'b1),
				.byteena_b (1'b1),
				.clock1 (1'b1),
				.clocken0 (1'b1),
				.clocken1 (1'b1),
				.clocken2 (1'b1),
				.clocken3 (1'b1),
				.data_b (1'b1),
				.eccstatus (),
				.q_b (),
				.rden_a (1'b1),
				.rden_b (1'b1),
				.wren_b (1'b0));
	defparam
		altsyncram_component.clock_enable_input_a = "BYPASS",
		altsyncram_component.clock_enable_output_a = "BYPASS",
		altsyncram_component.intended_device_family = "Cyclone IV E",
		altsyncram_component.lpm_hint = "ENABLE_RUNTIME_MOD=NO",
		altsyncram_component.lpm_type = "altsyncram",
		altsyncram_component.numwords_a = 4,
		altsyncram_component.operation_mode = "SINGLE_PORT",
		altsyncram_component.outdata_aclr_a = "NONE",
		altsyncram_component.outdata_reg_a = "UNREGISTERED",
		altsyncram_component.power_up_uninitialized = "FALSE",
		altsyncram_component.read_during_write_mode_port_a = "NEW_DATA_NO_NBE_READ",
		altsyncram_component.widthad_a = 5,
		altsyncram_component.width_a = 1024,
		altsyncram_component.width_byteena_a = 1;


endmodule

module hex_decoder(hex_digit, segments);
    input [3:0] hex_digit;
    output reg [6:0] segments;
   
    always @(*)
        case (hex_digit)
            4'h0: segments = 7'b100_0000;
            4'h1: segments = 7'b111_1001;
            4'h2: segments = 7'b010_0100;
            4'h3: segments = 7'b011_0000;
            4'h4: segments = 7'b001_1001;
            4'h5: segments = 7'b001_0010;
            4'h6: segments = 7'b000_0010;
            4'h7: segments = 7'b111_1000;
            4'h8: segments = 7'b000_0000;
            4'h9: segments = 7'b001_1000;  
            default: segments = 7'b111_1111;
        endcase
endmodule